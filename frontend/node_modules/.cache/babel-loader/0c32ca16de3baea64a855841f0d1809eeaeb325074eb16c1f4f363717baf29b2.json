{"ast":null,"code":"import _objectSpread from \"/Users/deepshikha/Documents/vjepa2-robot-control/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/App.js\";\nimport React from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TrajectoryPredictor from './components/TrajectoryPredictor';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n// API URL for backend communication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\nfunction App() {\n  // Create theme\n  const theme = createTheme({\n    palette: {\n      mode: 'light',\n      primary: {\n        main: '#1976d2'\n      },\n      secondary: {\n        main: '#9c27b0'\n      },\n      background: {\n        default: '#f5f5f5'\n      }\n    }\n  });\n\n  // API calls\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/status\"));\n      const data = await response.json();\n      updateStatus(data);\n    } catch (error) {\n      console.error('Error fetching status:', error);\n      showStatusMessage('Failed to connect to server', 'error');\n    }\n  };\n  const initializeSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/initialize\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gui: true\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System initialized successfully', 'success');\n        logMessage('System initialized successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to initialize system', 'error');\n        logMessage('Failed to initialize system', 'error');\n      }\n    } catch (error) {\n      console.error('Error initializing system:', error);\n      showStatusMessage('Error initializing system: ' + error.message, 'error');\n      logMessage('Error initializing system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetEnvironment = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/reset\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Environment reset successfully', 'success');\n        logMessage('Environment reset successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to reset environment', 'error');\n        logMessage('Failed to reset environment', 'error');\n      }\n    } catch (error) {\n      console.error('Error resetting environment:', error);\n      showStatusMessage('Error resetting environment: ' + error.message, 'error');\n      logMessage('Error resetting environment: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const shutdownSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/shutdown\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System shutdown successfully', 'success');\n        logMessage('System shutdown successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to shutdown system', 'error');\n        logMessage('Failed to shutdown system', 'error');\n      }\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message, 'error');\n      logMessage('Error shutting down system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendGoalImage = async imageData => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/set_goal\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Goal image set successfully', 'success');\n        logMessage('Goal image set successfully');\n        setGoalSet(true);\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to set goal image', 'error');\n        logMessage('Failed to set goal image', 'error');\n      }\n    } catch (error) {\n      console.error('Error setting goal image:', error);\n      showStatusMessage('Error setting goal image: ' + error.message, 'error');\n      logMessage('Error setting goal image: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const runControlLoop = async () => {\n    if (!status.environment || !status.model || !status.controller || !goalSet) {\n      showStatusMessage('System not fully initialized or goal not set', 'error');\n      return;\n    }\n    const planningHorizon = document.getElementById('planning-horizon').value;\n    const distanceThreshold = document.getElementById('distance-threshold').value;\n    setLoading(true);\n    setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      running: true\n    }));\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/run_control\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          planning_horizon: parseInt(planningHorizon),\n          distance_threshold: parseFloat(distanceThreshold)\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Control loop started', 'success');\n        logMessage('Control loop started with planning horizon ' + planningHorizon + ' and distance threshold ' + distanceThreshold);\n      } else {\n        setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          running: false\n        }));\n        showStatusMessage('Failed to start control loop: ' + data.error, 'error');\n        logMessage('Failed to start control loop: ' + data.error, 'error');\n      }\n    } catch (error) {\n      console.error('Error starting control loop:', error);\n      setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        running: false\n      }));\n      showStatusMessage('Error starting control loop: ' + error.message, 'error');\n      logMessage('Error starting control loop: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const stopExecution = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/stop\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Execution stopped', 'success');\n        logMessage('Execution stopped');\n        setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          running: false\n        }));\n      } else {\n        showStatusMessage('Failed to stop execution', 'error');\n        logMessage('Failed to stop execution', 'error');\n      }\n    } catch (error) {\n      console.error('Error stopping execution:', error);\n      showStatusMessage('Error stopping execution: ' + error.message, 'error');\n      logMessage('Error stopping execution: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions\n  const updateStatus = data => {\n    setStatus({\n      environment: data.environment_initialized,\n      model: data.model_initialized,\n      controller: data.controller_initialized,\n      goal: data.goal_set,\n      running: data.running\n    });\n    if (data.goal_set) {\n      setGoalSet(true);\n    }\n  };\n  const showStatusMessage = (message, type) => {\n    setStatusMessage(message);\n    setStatusType(type);\n    setTimeout(() => {\n      setStatusMessage('');\n    }, 5000);\n  };\n  const logMessage = function (message) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n    const timestamp = new Date().toLocaleTimeString();\n    setLogEntries(prev => [{\n      timestamp,\n      message,\n      type\n    }, ...prev]);\n  };\n  const clearLog = () => {\n    setLogEntries([{\n      timestamp: 'System initialized',\n      message: 'Welcome to V-JEPA 2 Robot Control',\n      type: 'info'\n    }]);\n  };\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const imageData = event.target.result.split(',')[1];\n        setGoalImage(\"data:\".concat(file.type, \";base64,\").concat(imageData));\n        setGoalImage(event.target.result);\n        setGoalSet(true);\n\n        // Send to server\n        sendGoalImage(imageData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const captureCurrentView = () => {\n    if (observationImage && observationImage !== 'static/images/placeholder.png') {\n      const imageData = observationImage.split(',')[1]; // Get base64 part\n      setGoalImage(observationImage);\n      setGoalSet(true);\n\n      // Send to server\n      sendGoalImage(imageData);\n    } else {\n      showStatusMessage('No observation available to capture', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(TrajectoryPredictor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ThemeProvider","createTheme","CssBaseline","TrajectoryPredictor","Header","Footer","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_BACKEND_URL","App","theme","palette","mode","primary","main","secondary","background","default","fetchStatus","response","fetch","concat","data","json","updateStatus","error","console","showStatusMessage","initializeSystem","setLoading","method","headers","body","JSON","stringify","gui","success","logMessage","message","resetEnvironment","shutdownSystem","sendGoalImage","imageData","image","setGoalSet","runControlLoop","status","environment","model","controller","goalSet","planningHorizon","document","getElementById","value","distanceThreshold","setStatus","prev","_objectSpread","running","planning_horizon","parseInt","distance_threshold","parseFloat","stopExecution","environment_initialized","model_initialized","controller_initialized","goal","goal_set","type","setStatusMessage","setStatusType","setTimeout","arguments","length","undefined","timestamp","Date","toLocaleTimeString","setLogEntries","clearLog","handleFileUpload","e","file","target","files","startsWith","reader","FileReader","onload","event","result","split","setGoalImage","readAsDataURL","captureCurrentView","observationImage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/App.js"],"sourcesContent":["import React from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TrajectoryPredictor from './components/TrajectoryPredictor';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n// API URL for backend communication\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\n\nfunction App() {\n  // Create theme\n  const theme = createTheme({\n    palette: {\n      mode: 'light',\n      primary: {\n        main: '#1976d2',\n      },\n      secondary: {\n        main: '#9c27b0',\n      },\n      background: {\n        default: '#f5f5f5',\n      },\n    },\n  });\n  \n\n  \n  // API calls\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/status`);\n      const data = await response.json();\n      updateStatus(data);\n    } catch (error) {\n      console.error('Error fetching status:', error);\n      showStatusMessage('Failed to connect to server', 'error');\n    }\n  };\n  \n  const initializeSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ gui: true }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System initialized successfully', 'success');\n        logMessage('System initialized successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to initialize system', 'error');\n        logMessage('Failed to initialize system', 'error');\n      }\n    } catch (error) {\n      console.error('Error initializing system:', error);\n      showStatusMessage('Error initializing system: ' + error.message, 'error');\n      logMessage('Error initializing system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const resetEnvironment = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/reset`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Environment reset successfully', 'success');\n        logMessage('Environment reset successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to reset environment', 'error');\n        logMessage('Failed to reset environment', 'error');\n      }\n    } catch (error) {\n      console.error('Error resetting environment:', error);\n      showStatusMessage('Error resetting environment: ' + error.message, 'error');\n      logMessage('Error resetting environment: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const shutdownSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/shutdown`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System shutdown successfully', 'success');\n        logMessage('System shutdown successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to shutdown system', 'error');\n        logMessage('Failed to shutdown system', 'error');\n      }\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message, 'error');\n      logMessage('Error shutting down system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const sendGoalImage = async (imageData) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/set_goal`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ image: imageData }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Goal image set successfully', 'success');\n        logMessage('Goal image set successfully');\n        setGoalSet(true);\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to set goal image', 'error');\n        logMessage('Failed to set goal image', 'error');\n      }\n    } catch (error) {\n      console.error('Error setting goal image:', error);\n      showStatusMessage('Error setting goal image: ' + error.message, 'error');\n      logMessage('Error setting goal image: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const runControlLoop = async () => {\n    if (!status.environment || !status.model || !status.controller || !goalSet) {\n      showStatusMessage('System not fully initialized or goal not set', 'error');\n      return;\n    }\n    \n    const planningHorizon = document.getElementById('planning-horizon').value;\n    const distanceThreshold = document.getElementById('distance-threshold').value;\n    \n    setLoading(true);\n    setStatus(prev => ({...prev, running: true}));\n    \n    try {\n      const response = await fetch(`${API_URL}/api/run_control`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          planning_horizon: parseInt(planningHorizon),\n          distance_threshold: parseFloat(distanceThreshold)\n        }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Control loop started', 'success');\n        logMessage('Control loop started with planning horizon ' + planningHorizon + ' and distance threshold ' + distanceThreshold);\n      } else {\n        setStatus(prev => ({...prev, running: false}));\n        showStatusMessage('Failed to start control loop: ' + data.error, 'error');\n        logMessage('Failed to start control loop: ' + data.error, 'error');\n      }\n    } catch (error) {\n      console.error('Error starting control loop:', error);\n      setStatus(prev => ({...prev, running: false}));\n      showStatusMessage('Error starting control loop: ' + error.message, 'error');\n      logMessage('Error starting control loop: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const stopExecution = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/stop`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Execution stopped', 'success');\n        logMessage('Execution stopped');\n        setStatus(prev => ({...prev, running: false}));\n      } else {\n        showStatusMessage('Failed to stop execution', 'error');\n        logMessage('Failed to stop execution', 'error');\n      }\n    } catch (error) {\n      console.error('Error stopping execution:', error);\n      showStatusMessage('Error stopping execution: ' + error.message, 'error');\n      logMessage('Error stopping execution: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions\n  const updateStatus = (data) => {\n    setStatus({\n      environment: data.environment_initialized,\n      model: data.model_initialized,\n      controller: data.controller_initialized,\n      goal: data.goal_set,\n      running: data.running\n    });\n    \n    if (data.goal_set) {\n      setGoalSet(true);\n    }\n  };\n  \n  const showStatusMessage = (message, type) => {\n    setStatusMessage(message);\n    setStatusType(type);\n    setTimeout(() => {\n      setStatusMessage('');\n    }, 5000);\n  };\n  \n  const logMessage = (message, type = 'info') => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLogEntries(prev => [\n      {\n        timestamp,\n        message,\n        type\n      },\n      ...prev\n    ]);\n  };\n  \n  const clearLog = () => {\n    setLogEntries([{\n      timestamp: 'System initialized',\n      message: 'Welcome to V-JEPA 2 Robot Control',\n      type: 'info'\n    }]);\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const imageData = event.target.result.split(',')[1];\n        setGoalImage(`data:${file.type};base64,${imageData}`);\n        setGoalImage(event.target.result);\n        setGoalSet(true);\n        \n        // Send to server\n        sendGoalImage(imageData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const captureCurrentView = () => {\n    if (observationImage && observationImage !== 'static/images/placeholder.png') {\n      const imageData = observationImage.split(',')[1];  // Get base64 part\n      setGoalImage(observationImage);\n      setGoalSet(true);\n      \n      // Send to server\n      sendGoalImage(imageData);\n    } else {\n      showStatusMessage('No observation available to capture', 'error');\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <Header />\n        \n        <main>\n          <TrajectoryPredictor />\n        </main>\n        \n        <Footer />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from \"/Users/deepshikha/Documents/vjepa2-robot-control/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport StatusPanel from './components/StatusPanel';\nimport ObservationPanel from './components/ObservationPanel';\nimport GoalPanel from './components/GoalPanel';\nimport ControlPanel from './components/ControlPanel';\nimport Visualization3D from './components/Visualization3D';\nimport LogPanel from './components/LogPanel';\n\n// API URL for backend communication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\nfunction App() {\n  _s();\n  // Socket reference\n  const socketRef = useRef(null);\n\n  // State management\n  const [status, setStatus] = useState({\n    environment: false,\n    model: false,\n    controller: false,\n    goal: false,\n    running: false\n  });\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [statusType, setStatusType] = useState('');\n  const [observationImage, setObservationImage] = useState('static/images/placeholder.png');\n  const [goalImage, setGoalImage] = useState('static/images/placeholder.png');\n  const [goalSet, setGoalSet] = useState(false);\n  const [robotState, setRobotState] = useState({\n    position: [0, 0, 0],\n    gripper: 0\n  });\n  const [progress, setProgress] = useState(0);\n  const [distance, setDistance] = useState('-');\n  const [logEntries, setLogEntries] = useState([{\n    timestamp: 'System initialized',\n    message: 'Welcome to V-JEPA 2 Robot Control',\n    type: 'info'\n  }]);\n\n  // Initialize Socket.IO connection\n  useEffect(() => {\n    // Connect with API_URL to ensure consistency\n    socketRef.current = io(API_URL, {\n      transports: ['polling', 'websocket'],\n      path: '/socket.io',\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      forceNew: true,\n      withCredentials: false\n    });\n    socketRef.current.on('connect', () => {\n      logMessage('Connected to server');\n      fetchStatus();\n    });\n    socketRef.current.on('disconnect', () => {\n      logMessage('Disconnected from server', 'error');\n      setStatus({\n        environment: false,\n        model: false,\n        controller: false,\n        goal: false,\n        running: false\n      });\n    });\n    socketRef.current.on('observation', data => {\n      setObservationImage(\"data:image/jpeg;base64,\".concat(data.image));\n    });\n    socketRef.current.on('control_result', data => {\n      setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        running: false\n      }));\n      if (data.success) {\n        showStatusMessage(\"Goal reached in \".concat(data.steps, \" steps with distance \").concat(data.final_distance.toFixed(4)), 'success');\n        logMessage(\"Goal reached in \".concat(data.steps, \" steps (\").concat(data.time_taken.toFixed(2), \"s)\"));\n      } else {\n        showStatusMessage(\"Failed to reach goal: \".concat(data.reason), 'error');\n        logMessage(\"Failed to reach goal: \".concat(data.reason), 'warning');\n      }\n      setProgress(100);\n    });\n    socketRef.current.on('control_progress', data => {\n      const progressPercent = data.step / data.max_steps * 100;\n      setProgress(progressPercent);\n      setDistance(data.distance.toFixed(4));\n      if (data.robot_state) {\n        setRobotState({\n          position: data.robot_state.position,\n          gripper: data.robot_state.gripper\n        });\n      }\n    });\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, []);\n\n  // API calls\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/status\"));\n      const data = await response.json();\n      updateStatus(data);\n    } catch (error) {\n      console.error('Error fetching status:', error);\n      showStatusMessage('Failed to connect to server', 'error');\n    }\n  };\n  const initializeSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/initialize\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gui: true\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System initialized successfully', 'success');\n        logMessage('System initialized successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to initialize system', 'error');\n        logMessage('Failed to initialize system', 'error');\n      }\n    } catch (error) {\n      console.error('Error initializing system:', error);\n      showStatusMessage('Error initializing system: ' + error.message, 'error');\n      logMessage('Error initializing system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetEnvironment = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/reset\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Environment reset successfully', 'success');\n        logMessage('Environment reset successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to reset environment', 'error');\n        logMessage('Failed to reset environment', 'error');\n      }\n    } catch (error) {\n      console.error('Error resetting environment:', error);\n      showStatusMessage('Error resetting environment: ' + error.message, 'error');\n      logMessage('Error resetting environment: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const shutdownSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/shutdown\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System shutdown successfully', 'success');\n        logMessage('System shutdown successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to shutdown system', 'error');\n        logMessage('Failed to shutdown system', 'error');\n      }\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message, 'error');\n      logMessage('Error shutting down system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendGoalImage = async imageData => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/set_goal\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Goal image set successfully', 'success');\n        logMessage('Goal image set successfully');\n        setGoalSet(true);\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to set goal image', 'error');\n        logMessage('Failed to set goal image', 'error');\n      }\n    } catch (error) {\n      console.error('Error setting goal image:', error);\n      showStatusMessage('Error setting goal image: ' + error.message, 'error');\n      logMessage('Error setting goal image: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const runControlLoop = async () => {\n    if (!status.environment || !status.model || !status.controller || !goalSet) {\n      showStatusMessage('System not fully initialized or goal not set', 'error');\n      return;\n    }\n    const planningHorizon = document.getElementById('planning-horizon').value;\n    const distanceThreshold = document.getElementById('distance-threshold').value;\n    setLoading(true);\n    setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      running: true\n    }));\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/run_control\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          planning_horizon: parseInt(planningHorizon),\n          distance_threshold: parseFloat(distanceThreshold)\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Control loop started', 'success');\n        logMessage('Control loop started with planning horizon ' + planningHorizon + ' and distance threshold ' + distanceThreshold);\n      } else {\n        setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          running: false\n        }));\n        showStatusMessage('Failed to start control loop: ' + data.error, 'error');\n        logMessage('Failed to start control loop: ' + data.error, 'error');\n      }\n    } catch (error) {\n      console.error('Error starting control loop:', error);\n      setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        running: false\n      }));\n      showStatusMessage('Error starting control loop: ' + error.message, 'error');\n      logMessage('Error starting control loop: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const stopExecution = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/api/stop\"), {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Execution stopped', 'success');\n        logMessage('Execution stopped');\n        setStatus(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          running: false\n        }));\n      } else {\n        showStatusMessage('Failed to stop execution', 'error');\n        logMessage('Failed to stop execution', 'error');\n      }\n    } catch (error) {\n      console.error('Error stopping execution:', error);\n      showStatusMessage('Error stopping execution: ' + error.message, 'error');\n      logMessage('Error stopping execution: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions\n  const updateStatus = data => {\n    setStatus({\n      environment: data.environment_initialized,\n      model: data.model_initialized,\n      controller: data.controller_initialized,\n      goal: data.goal_set,\n      running: data.running\n    });\n    if (data.goal_set) {\n      setGoalSet(true);\n    }\n  };\n  const showStatusMessage = (message, type) => {\n    setStatusMessage(message);\n    setStatusType(type);\n    setTimeout(() => {\n      setStatusMessage('');\n    }, 5000);\n  };\n  const logMessage = function (message) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n    const timestamp = new Date().toLocaleTimeString();\n    setLogEntries(prev => [{\n      timestamp,\n      message,\n      type\n    }, ...prev]);\n  };\n  const clearLog = () => {\n    setLogEntries([{\n      timestamp: 'System initialized',\n      message: 'Welcome to V-JEPA 2 Robot Control',\n      type: 'info'\n    }]);\n  };\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const imageData = event.target.result.split(',')[1];\n        setGoalImage(\"data:\".concat(file.type, \";base64,\").concat(imageData));\n        setGoalImage(event.target.result);\n        setGoalSet(true);\n\n        // Send to server\n        sendGoalImage(imageData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const captureCurrentView = () => {\n    if (observationImage && observationImage !== 'static/images/placeholder.png') {\n      const imageData = observationImage.split(',')[1]; // Get base64 part\n      setGoalImage(observationImage);\n      setGoalSet(true);\n\n      // Send to server\n      sendGoalImage(imageData);\n    } else {\n      showStatusMessage('No observation available to capture', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(StatusPanel, {\n          status: status,\n          loading: loading,\n          statusMessage: statusMessage,\n          statusType: statusType,\n          onInitialize: initializeSystem,\n          onReset: resetEnvironment,\n          onShutdown: shutdownSystem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"views-container\",\n          children: [/*#__PURE__*/_jsxDEV(ObservationPanel, {\n            observationImage: observationImage,\n            robotState: robotState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GoalPanel, {\n            goalImage: goalImage,\n            goalSet: goalSet,\n            onFileUpload: handleFileUpload,\n            onCapture: captureCurrentView\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n          status: status,\n          progress: progress,\n          distance: distance,\n          onRun: runControlLoop,\n          onStop: stopExecution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Visualization3D, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LogPanel, {\n          logEntries: logEntries,\n          onClearLog: clearLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DjW0/U3pc5nZYYndqWrPQQEyj28=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","Header","Footer","StatusPanel","ObservationPanel","GoalPanel","ControlPanel","Visualization3D","LogPanel","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_BACKEND_URL","App","_s","socketRef","status","setStatus","environment","model","controller","goal","running","loading","setLoading","statusMessage","setStatusMessage","statusType","setStatusType","observationImage","setObservationImage","goalImage","setGoalImage","goalSet","setGoalSet","robotState","setRobotState","position","gripper","progress","setProgress","distance","setDistance","logEntries","setLogEntries","timestamp","message","type","current","transports","path","reconnectionAttempts","reconnectionDelay","forceNew","withCredentials","on","logMessage","fetchStatus","data","concat","image","prev","_objectSpread","success","showStatusMessage","steps","final_distance","toFixed","time_taken","reason","progressPercent","step","max_steps","robot_state","disconnect","response","fetch","json","updateStatus","error","console","initializeSystem","method","headers","body","JSON","stringify","gui","resetEnvironment","shutdownSystem","sendGoalImage","imageData","runControlLoop","planningHorizon","document","getElementById","value","distanceThreshold","planning_horizon","parseInt","distance_threshold","parseFloat","stopExecution","environment_initialized","model_initialized","controller_initialized","goal_set","setTimeout","arguments","length","undefined","Date","toLocaleTimeString","clearLog","handleFileUpload","e","file","target","files","startsWith","reader","FileReader","onload","event","result","split","readAsDataURL","captureCurrentView","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onInitialize","onReset","onShutdown","onFileUpload","onCapture","onRun","onStop","onClearLog","_c","$RefreshReg$"],"sources":["/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport StatusPanel from './components/StatusPanel';\nimport ObservationPanel from './components/ObservationPanel';\nimport GoalPanel from './components/GoalPanel';\nimport ControlPanel from './components/ControlPanel';\nimport Visualization3D from './components/Visualization3D';\nimport LogPanel from './components/LogPanel';\n\n// API URL for backend communication\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\n\nfunction App() {\n  // Socket reference\n  const socketRef = useRef(null);\n  \n  // State management\n  const [status, setStatus] = useState({\n    environment: false,\n    model: false,\n    controller: false,\n    goal: false,\n    running: false\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [statusType, setStatusType] = useState('');\n  const [observationImage, setObservationImage] = useState('static/images/placeholder.png');\n  const [goalImage, setGoalImage] = useState('static/images/placeholder.png');\n  const [goalSet, setGoalSet] = useState(false);\n  const [robotState, setRobotState] = useState({\n    position: [0, 0, 0],\n    gripper: 0\n  });\n  const [progress, setProgress] = useState(0);\n  const [distance, setDistance] = useState('-');\n  const [logEntries, setLogEntries] = useState([{\n    timestamp: 'System initialized',\n    message: 'Welcome to V-JEPA 2 Robot Control',\n    type: 'info'\n  }]);\n  \n  // Initialize Socket.IO connection\n  useEffect(() => {\n    // Connect with API_URL to ensure consistency\n    socketRef.current = io(API_URL, {\n      transports: ['polling', 'websocket'],\n      path: '/socket.io',\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      forceNew: true,\n      withCredentials: false\n    });\n    \n    socketRef.current.on('connect', () => {\n      logMessage('Connected to server');\n      fetchStatus();\n    });\n    \n    socketRef.current.on('disconnect', () => {\n      logMessage('Disconnected from server', 'error');\n      setStatus({\n        environment: false,\n        model: false,\n        controller: false,\n        goal: false,\n        running: false\n      });\n    });\n    \n    socketRef.current.on('observation', (data) => {\n      setObservationImage(`data:image/jpeg;base64,${data.image}`);\n    });\n    \n    socketRef.current.on('control_result', (data) => {\n      setStatus(prev => ({...prev, running: false}));\n      \n      if (data.success) {\n        showStatusMessage(`Goal reached in ${data.steps} steps with distance ${data.final_distance.toFixed(4)}`, 'success');\n        logMessage(`Goal reached in ${data.steps} steps (${data.time_taken.toFixed(2)}s)`);\n      } else {\n        showStatusMessage(`Failed to reach goal: ${data.reason}`, 'error');\n        logMessage(`Failed to reach goal: ${data.reason}`, 'warning');\n      }\n      \n      setProgress(100);\n    });\n    \n    socketRef.current.on('control_progress', (data) => {\n      const progressPercent = (data.step / data.max_steps) * 100;\n      setProgress(progressPercent);\n      setDistance(data.distance.toFixed(4));\n      \n      if (data.robot_state) {\n        setRobotState({\n          position: data.robot_state.position,\n          gripper: data.robot_state.gripper\n        });\n      }\n    });\n    \n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, []);\n  \n  // API calls\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/status`);\n      const data = await response.json();\n      updateStatus(data);\n    } catch (error) {\n      console.error('Error fetching status:', error);\n      showStatusMessage('Failed to connect to server', 'error');\n    }\n  };\n  \n  const initializeSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ gui: true }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System initialized successfully', 'success');\n        logMessage('System initialized successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to initialize system', 'error');\n        logMessage('Failed to initialize system', 'error');\n      }\n    } catch (error) {\n      console.error('Error initializing system:', error);\n      showStatusMessage('Error initializing system: ' + error.message, 'error');\n      logMessage('Error initializing system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const resetEnvironment = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/reset`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Environment reset successfully', 'success');\n        logMessage('Environment reset successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to reset environment', 'error');\n        logMessage('Failed to reset environment', 'error');\n      }\n    } catch (error) {\n      console.error('Error resetting environment:', error);\n      showStatusMessage('Error resetting environment: ' + error.message, 'error');\n      logMessage('Error resetting environment: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const shutdownSystem = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/shutdown`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('System shutdown successfully', 'success');\n        logMessage('System shutdown successfully');\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to shutdown system', 'error');\n        logMessage('Failed to shutdown system', 'error');\n      }\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message, 'error');\n      logMessage('Error shutting down system: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const sendGoalImage = async (imageData) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/set_goal`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ image: imageData }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Goal image set successfully', 'success');\n        logMessage('Goal image set successfully');\n        setGoalSet(true);\n        fetchStatus();\n      } else {\n        showStatusMessage('Failed to set goal image', 'error');\n        logMessage('Failed to set goal image', 'error');\n      }\n    } catch (error) {\n      console.error('Error setting goal image:', error);\n      showStatusMessage('Error setting goal image: ' + error.message, 'error');\n      logMessage('Error setting goal image: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const runControlLoop = async () => {\n    if (!status.environment || !status.model || !status.controller || !goalSet) {\n      showStatusMessage('System not fully initialized or goal not set', 'error');\n      return;\n    }\n    \n    const planningHorizon = document.getElementById('planning-horizon').value;\n    const distanceThreshold = document.getElementById('distance-threshold').value;\n    \n    setLoading(true);\n    setStatus(prev => ({...prev, running: true}));\n    \n    try {\n      const response = await fetch(`${API_URL}/api/run_control`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          planning_horizon: parseInt(planningHorizon),\n          distance_threshold: parseFloat(distanceThreshold)\n        }),\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Control loop started', 'success');\n        logMessage('Control loop started with planning horizon ' + planningHorizon + ' and distance threshold ' + distanceThreshold);\n      } else {\n        setStatus(prev => ({...prev, running: false}));\n        showStatusMessage('Failed to start control loop: ' + data.error, 'error');\n        logMessage('Failed to start control loop: ' + data.error, 'error');\n      }\n    } catch (error) {\n      console.error('Error starting control loop:', error);\n      setStatus(prev => ({...prev, running: false}));\n      showStatusMessage('Error starting control loop: ' + error.message, 'error');\n      logMessage('Error starting control loop: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const stopExecution = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/api/stop`, {\n        method: 'POST',\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        showStatusMessage('Execution stopped', 'success');\n        logMessage('Execution stopped');\n        setStatus(prev => ({...prev, running: false}));\n      } else {\n        showStatusMessage('Failed to stop execution', 'error');\n        logMessage('Failed to stop execution', 'error');\n      }\n    } catch (error) {\n      console.error('Error stopping execution:', error);\n      showStatusMessage('Error stopping execution: ' + error.message, 'error');\n      logMessage('Error stopping execution: ' + error.message, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Helper functions\n  const updateStatus = (data) => {\n    setStatus({\n      environment: data.environment_initialized,\n      model: data.model_initialized,\n      controller: data.controller_initialized,\n      goal: data.goal_set,\n      running: data.running\n    });\n    \n    if (data.goal_set) {\n      setGoalSet(true);\n    }\n  };\n  \n  const showStatusMessage = (message, type) => {\n    setStatusMessage(message);\n    setStatusType(type);\n    setTimeout(() => {\n      setStatusMessage('');\n    }, 5000);\n  };\n  \n  const logMessage = (message, type = 'info') => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLogEntries(prev => [\n      {\n        timestamp,\n        message,\n        type\n      },\n      ...prev\n    ]);\n  };\n  \n  const clearLog = () => {\n    setLogEntries([{\n      timestamp: 'System initialized',\n      message: 'Welcome to V-JEPA 2 Robot Control',\n      type: 'info'\n    }]);\n  };\n  \n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const imageData = event.target.result.split(',')[1];\n        setGoalImage(`data:${file.type};base64,${imageData}`);\n        setGoalImage(event.target.result);\n        setGoalSet(true);\n        \n        // Send to server\n        sendGoalImage(imageData);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const captureCurrentView = () => {\n    if (observationImage && observationImage !== 'static/images/placeholder.png') {\n      const imageData = observationImage.split(',')[1];  // Get base64 part\n      setGoalImage(observationImage);\n      setGoalSet(true);\n      \n      // Send to server\n      sendGoalImage(imageData);\n    } else {\n      showStatusMessage('No observation available to capture', 'error');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      \n      <main>\n        <div className=\"container\">\n          <StatusPanel \n            status={status} \n            loading={loading} \n            statusMessage={statusMessage} \n            statusType={statusType}\n            onInitialize={initializeSystem}\n            onReset={resetEnvironment}\n            onShutdown={shutdownSystem}\n          />\n          \n          <div className=\"views-container\">\n            <ObservationPanel \n              observationImage={observationImage} \n              robotState={robotState} \n            />\n            \n            <GoalPanel \n              goalImage={goalImage}\n              goalSet={goalSet}\n              onFileUpload={handleFileUpload}\n              onCapture={captureCurrentView}\n            />\n          </div>\n          \n          <ControlPanel \n            status={status}\n            progress={progress}\n            distance={distance}\n            onRun={runControlLoop}\n            onStop={stopExecution}\n          />\n          \n          <Visualization3D />\n          \n          <LogPanel \n            logEntries={logEntries}\n            onClearLog={clearLog}\n          />\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
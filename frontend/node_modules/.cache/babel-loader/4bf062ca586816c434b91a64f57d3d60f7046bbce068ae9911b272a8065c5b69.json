{"ast":null,"code":"var _jsxFileName = \"/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/components/Visualization3D.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Visualization3D() {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  const containerRef = useRef(null);\n  const robotVizRef = useRef(null);\n  const interval3DRef = useRef(null);\n  const toggleVisibility = () => {\n    // If 3D visualization doesn't exist, initialize it\n    if (!robotVizRef.current) {\n      // This would be initialized with your 3D visualization code\n      // For now, we'll just toggle visibility\n      setIsVisible(!isVisible);\n    } else {\n      setIsVisible(!isVisible);\n      if (!isVisible) {\n        // Setup robot state updates when visible\n        setupRobot3DStateUpdates();\n      } else {\n        // Stop updates to save resources\n        if (interval3DRef.current) {\n          clearInterval(interval3DRef.current);\n          interval3DRef.current = null;\n        }\n      }\n    }\n  };\n  const setupRobot3DStateUpdates = () => {\n    // This would connect to your backend to get robot state updates\n    // For now, just a placeholder\n    if (interval3DRef.current) {\n      clearInterval(interval3DRef.current);\n    }\n    interval3DRef.current = setInterval(() => {\n      // This would update the 3D visualization with latest robot state\n      // For now, it's just a placeholder\n    }, 100); // Update every 100ms\n  };\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (interval3DRef.current) {\n        clearInterval(interval3DRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel viz3d-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"3D Robot Visualization\", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"toggle-3d-btn\",\n        className: \"btn secondary\",\n        onClick: toggleVisibility,\n        children: isVisible ? 'Hide 3D View' : 'Show 3D View'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"robot-3d-container\",\n      ref: containerRef,\n      className: \"robot-3d-container\",\n      style: {\n        display: isVisible ? 'block' : 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization3D, \"TU1PZHAcyuiJxrfX8NUegBnTYpg=\");\n_c = Visualization3D;\nexport default Visualization3D;\nvar _c;\n$RefreshReg$(_c, \"Visualization3D\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Visualization3D","_s","isVisible","setIsVisible","containerRef","robotVizRef","interval3DRef","toggleVisibility","current","setupRobot3DStateUpdates","clearInterval","setInterval","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","_c","$RefreshReg$"],"sources":["/Users/deepshikha/Documents/vjepa2-robot-control/frontend/src/components/Visualization3D.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction Visualization3D() {\n  const [isVisible, setIsVisible] = useState(false);\n  const containerRef = useRef(null);\n  const robotVizRef = useRef(null);\n  const interval3DRef = useRef(null);\n  \n  const toggleVisibility = () => {\n    // If 3D visualization doesn't exist, initialize it\n    if (!robotVizRef.current) {\n      // This would be initialized with your 3D visualization code\n      // For now, we'll just toggle visibility\n      setIsVisible(!isVisible);\n    } else {\n      setIsVisible(!isVisible);\n      \n      if (!isVisible) {\n        // Setup robot state updates when visible\n        setupRobot3DStateUpdates();\n      } else {\n        // Stop updates to save resources\n        if (interval3DRef.current) {\n          clearInterval(interval3DRef.current);\n          interval3DRef.current = null;\n        }\n      }\n    }\n  };\n  \n  const setupRobot3DStateUpdates = () => {\n    // This would connect to your backend to get robot state updates\n    // For now, just a placeholder\n    if (interval3DRef.current) {\n      clearInterval(interval3DRef.current);\n    }\n    \n    interval3DRef.current = setInterval(() => {\n      // This would update the 3D visualization with latest robot state\n      // For now, it's just a placeholder\n    }, 100); // Update every 100ms\n  };\n  \n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (interval3DRef.current) {\n        clearInterval(interval3DRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"panel viz3d-panel\">\n      <h2>\n        3D Robot Visualization \n        <button \n          id=\"toggle-3d-btn\" \n          className=\"btn secondary\"\n          onClick={toggleVisibility}\n        >\n          {isVisible ? 'Hide 3D View' : 'Show 3D View'}\n        </button>\n      </h2>\n      <div \n        id=\"robot-3d-container\" \n        ref={containerRef}\n        className=\"robot-3d-container\" \n        style={{ display: isVisible ? 'block' : 'none' }}\n      >\n        {/* 3D visualization will be rendered here by three.js */}\n      </div>\n    </div>\n  );\n}\n\nexport default Visualization3D;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMS,YAAY,GAAGP,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMQ,WAAW,GAAGR,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMS,aAAa,GAAGT,MAAM,CAAC,IAAI,CAAC;EAElC,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,IAAI,CAACF,WAAW,CAACG,OAAO,EAAE;MACxB;MACA;MACAL,YAAY,CAAC,CAACD,SAAS,CAAC;IAC1B,CAAC,MAAM;MACLC,YAAY,CAAC,CAACD,SAAS,CAAC;MAExB,IAAI,CAACA,SAAS,EAAE;QACd;QACAO,wBAAwB,CAAC,CAAC;MAC5B,CAAC,MAAM;QACL;QACA,IAAIH,aAAa,CAACE,OAAO,EAAE;UACzBE,aAAa,CAACJ,aAAa,CAACE,OAAO,CAAC;UACpCF,aAAa,CAACE,OAAO,GAAG,IAAI;QAC9B;MACF;IACF;EACF,CAAC;EAED,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACrC;IACA;IACA,IAAIH,aAAa,CAACE,OAAO,EAAE;MACzBE,aAAa,CAACJ,aAAa,CAACE,OAAO,CAAC;IACtC;IAEAF,aAAa,CAACE,OAAO,GAAGG,WAAW,CAAC,MAAM;MACxC;MACA;IAAA,CACD,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIU,aAAa,CAACE,OAAO,EAAE;QACzBE,aAAa,CAACJ,aAAa,CAACE,OAAO,CAAC;MACtC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKa,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCd,OAAA;MAAAc,QAAA,GAAI,wBAEF,eAAAd,OAAA;QACEe,EAAE,EAAC,eAAe;QAClBF,SAAS,EAAC,eAAe;QACzBG,OAAO,EAAER,gBAAiB;QAAAM,QAAA,EAEzBX,SAAS,GAAG,cAAc,GAAG;MAAc;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACLpB,OAAA;MACEe,EAAE,EAAC,oBAAoB;MACvBM,GAAG,EAAEhB,YAAa;MAClBQ,SAAS,EAAC,oBAAoB;MAC9BS,KAAK,EAAE;QAAEC,OAAO,EAAEpB,SAAS,GAAG,OAAO,GAAG;MAAO;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CAxEQD,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AA0ExB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}